#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

vector<int> getOneComponent(bool** graph, int start ,int n, bool* visited){
    vector<int> component;
    queue<int> pendingNodes;
    pendingNodes.push(start);
    visited[start]=true;
    
    while(!pendingNodes.empty()){
        int curr=pendingNodes.front();
        pendingNodes.pop();
        component.push_back(curr);
        for(int i=0;i<n;i++){
            if(graph[curr][i] && !visited){
                pendingNodes.push(i);
                visited[i]=true;
            }
        }
    }
    return component;
}

vector<vector<int>> getAllComponents(bool** graph, int n){
    vector<vector<int>> result;
    bool* visited= new bool[n];
    
    for(int i=0;i<n;i++){
        if(!visited[i]){
            vector<int> component = getOneComponent(graph, i, n, visited);
            result.push_back(component);
        }
    }
    delete [] visited;
    return result;
}

int main(){
    int n,e;
    cin>>n>>e;
    
    bool** graph=new bool*[n];
    for(int i=0;i<n;i++){
        graph[i] = new bool[n];
    }
    
    for(int i=0;i<e;i++){
        int first,second;
        cin>>first>>second;
        graph[first][second]=true;
        graph[second][first]=true;
    }
    
    vector<vector<int>> connectedComponents = getAllComponents(graph, n);
    
    for(int i=0;i<connectedComponents.size();i++){
        sort(connectedComponents[i].begin(),connectedComponents[i].end());
        for(int j=0;j<connectedComponents[i].size();j++){
            cout<<connectedComponents[i][j]<<" ";
        }
        cout<<"\n";
    }
    
    for(int i=0;i<n;i++){
        delete [] graph[i];
    }
    delete [] graph;
    
}
