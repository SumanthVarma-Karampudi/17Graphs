#include<iostream>
using namespace std;

void print(int** edges, int n, int sv, bool* visited){
  cout << sv << endl;
  visited[sv] = true;
  for(int i=0; i<n; i++){
    if(i==sv){
      continue;
    }
    if(edges[sv][i]==1){
      if(visited[i]){
        continue;
      }
      print(edges, n, i, visited);
    }
  }
}

int main(){
  int n;
  int e;
  cin >> n >> e;

  int** edges = new int*[n];
  for(int i=0; i<n; i++){
    edges[i]=new int[n];
    for(int j=0; j<n; j++){
      edges[i][j]=0;
    }
  }

  for(int i=0; i<e; i++){
    int f,s;
    cin >> f >> s;
    edges[f][s]=1;
    edges[s][f]=1;
  }

  bool* visited = new bool[n];

  for(int i=0; i<n; i++){
    visited[i]=false;
  }

  print(edges, n, 0, visited);
  
  // Delete all the memory
  delete  [] visited;
  for(int i=0;i<n;i++)
  { 
    delete [] edges[i];
  }
  delete [] edges;
  return 0;
}






//Class Notes
#include<iostream>
using namespace std;

void print(int **edges, int n, int sv ,bool* visited))
{
  cout<<sv<<endl;
  visited[sv]=true;
  for(int i=0;i<n;i++)
  {
    if(i==sv)
      continue;
    if(edges[sv][i]=1){
      if(visited[i]){
        continue;
      print(edges,n,i,visited); 
    }
  }
}
      

int main()
{
  int n,e;
  cin>>n>>e;
  int** edges=new int*[n];       //creating dynamic 2D array
  for(int i=0;i<n;i++)
  {
    edges[i]=new int[n];
    for(int j=0;j<n;j++)
    {
      edges[i][j]=0;
    }
  }
  
  for(int i=0;i<e;i++)          //assigning edges
  {
    int fv,sv;                 //first vertex and second vertex
    cin>>fv>>sv;
    edges[fv][sv]=1;
    edges[sv][fv]=1;
  }
  
  bool* visited=new bool[n];
  for(int i=0;i<n;i++)
  {
    visited[i]=false;
  }
  
  print(edges,n,0,visited); 
  
  //free memory or delete space
  delete  [] visited;
  for(int i=0;i<n;i++)
  { 
    delete [] edges[i];
  }
  delete [] edges;
}
  
 
