#include<queue>
void BFS(int **edges, int n, int sv)
{
  queue<int> pendingvertices;
  bool* visited = new bool[n];
  for(int i=0;i<n;i++)
  {
    visited[i]=false;
  } 
  pendingvertices.push(sv);
  while(!pendingvertices.empty())
  {
     int currentvertex=pendingvertices.front(); 
     pendingvertices.pop();
     cout<<currentvertex<<endl;
     for(int i=0;i<n;i++)
     {
      if(edges[currentvertex][i]==1 && !visited[i])
      {
         pendingvertices.push(i);
         visited[i]=true;
      }
    }
  } 
  delete [] visited;
}




int main(){
  int n;
  int e;
  cin >> n >> e;

  int** edges = new int*[n];
  for(int i=0; i<n; i++){
    edges[i]=new int[n];
    for(int j=0; j<n; j++){
      edges[i][j]=0;
    }
  }

  for(int i=0; i<e; i++){
    int f,s;
    cin >> f >> s;
    edges[f][s]=1;
    edges[s][f]=1;
  }

  bool* visited = new bool[n];

  for(int i=0; i<n; i++){
    visited[i]=false;
  }
  
  cout<<BFS<<endl;
  printBFS(edges, n, 0);
  
  
  // Delete all the memory
  delete  [] visited;
  for(int i=0;i<n;i++)
  { 
    delete [] edges[i];
  }
  delete [] edges;
  return 0;
}
