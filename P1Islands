#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
void DFS(bool** graph, int n, bool* visited, int curr){
    visited[curr]=true;
    
    for(int i=0;i<n;i++){
        if(graph[curr][i] && !visited[i]){
            DFS(graph,n,visited,i);
        }
    }
}

int getIslandGroups(bool** graph, int n){
    bool* visited = new bool[n];
    int count=0;
    
    for(int i=0;i<n;i++){
        if(!visited[i]){
            DFS(graph,n,visited,i);
            ++count;
        }
    }
    return count;
}

int main(){
    int n,e;
    cin>>n>>e;
    
    bool** graph=new bool*[n];
    for(int i=0;i<n;i++){
        graph[i] = new bool[n];
    }
    
    for(int i=0;i<e;i++){
        int first,second;
        cin>>first>>second;
        graph[first][second]=true;
        graph[second][first]=true;
    }
    
    cout<<"No of islands"<< getIslandGroups(graph, n)<<endl;
    
    for(int i=0;i<n;i++){
        delete [] graph[i];
    }
    delete [] graph;
    
}

Sample Input 1:
5 8
0 1
0 4
1 2
2 0
2 4
3 0
3 2
4 3
Sample Output 1:
1 
