#include <iostream>
#include<algorithm>
using namespace std;

class Edge {
public:
	int source;
	int dest;
	int weight;
};

bool compare(Edge e1, Edge e2) {
	return e1.weight < e2.weight;
}

int findParent(int v, int* parent) {
	if (parent[v] == v) {
		return v;
	}
	return  (findParent(parent[v], parent));
}

void kruskals(Edge* input, int n, int e) {
	//Sort the input array based on weights
	sort(input, input + e, compare); //input=input.begin(),input+e=input.end(),user defined function to sort based on func def//

	Edge *output = new Edge[n - 1];

	int *parent = new int[n];

	for (int i = 0; i < n; i++) {
		parent[i] = i;
	}


	int count = 0;
	int i = 0;

	while (count != n - 1) {

		Edge currEdge = input[i];

		//check if we can add current edge in the mst or not
		int sourceParent = findParent(currEdge.source, parent);
		int destParent = findParent(currEdge.dest, parent);

		if (sourceParent != destParent) {
			output[count] = currEdge;
			count++;
			parent[sourceParent] = destParent;
		}
		i++;
	}

	for (int i = 0; i < n - 1; i++) {
		if (output[i].source < output[i].dest) {
			cout << output[i].source << " " << output[i].dest << " "
			     << output[i].weight << endl;
		}
		else {
			cout << output[i].dest << " " << output[i].source << " "
			     << output[i].weight << endl;
		}
	}
	delete [] output;
	delete [] parent;
}

int main()
{


	int n, e;
	cin >> n >> e;
	Edge* input = new Edge[e];

	for (int i = 0; i < e; i++) {
		int s, d, w;
		cin >> s >> d >> w;
		input[i].source = s;
		input[i].dest = d;
		input[i].weight = w;
	}

	kruskals(input, n, e);
	delete [] input;
}
